#!/bin/bash

# This script is responsible for generating and updating the Makefile
# for ft_framework.

HEADER="\
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: bhildebr <bhildebr@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: $(date +'%Y/%m/%d %H:%M:%S') by bhildebr          #+#    #+#              #
#    Updated: $(date +'%Y/%m/%d %H:%M:%S') by bhildebr         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #"

NAME="libtrillian.a"
RELEASE="latest"

CC="gcc"
CFLAGS="-Wall -Wextra -Werror -std=c99"
CPATHS="\\
	-include trillian.h \\
	-include any.h \\
$(find ./source -type f -name '*.h' -exec basename {} \; | sed 's/.*/\t-include & \\/' | sed '/trillian\.h/d' | sed '/any\.h/d')
$(find ./source/base/processes -mindepth 1 -type d -exec echo -e '\t'-iquote {} \\ \; | sed 's/ .*ft_framework\// /')
$(find ./source/base/types -mindepth 1 -type d -exec echo -e '\t'-iquote {} \\ \; | sed 's/ .*ft_framework\// /')
$(find ./source/processes -mindepth 1 -type d -exec echo -e '\t'-iquote {} \\ \; | sed 's/ .*ft_framework\// /')
$(find ./source/types -mindepth 1 -type d -exec echo -e '\t'-iquote {} \\ \; | sed 's/ .*ft_framework\// /' | sed '$s/ \\//')"

SOURCES="$(find ./source -type f -name "*.c" -exec echo {} \; | sed 's/.*/\t& \\/' | sed '$s/ \\$//' | sed '0,/^/s//\\\n/')"
HEADERS="$(find ./source -type f -name "*.h" -exec basename {} \; | sed 's/.*/\t& \\/' | sed '$s/ \\$//' | sed '0,/^/s//\\\n/')"
OBJECTS="$(find ./source -type f -name "*.c" -exec basename {} \; | sed 's/\.c$/.o/' | sed 's/.*/\t& \\/' | sed '$s/ \\$//' | sed '0,/^/s//\\\n/')"
DEPENDENCIES="$(find ./source -type f -name "*.c" -exec basename {} \; | sed 's/\.c$/.d/' | sed 's/.*/\t& \\/' | sed '$s/ \\$//' | sed '0,/^/s//\\\n/')"

for source in $(find ./source -type f -name "*.c" -exec echo {} \;); do
	object=$(basename $source | sed 's/\.c/.o/')
	dependency=$(basename $source | sed 's/\.c/.d/')

	latest_object="\$(LATEST_DIR)/objects/$object"
	latest_dependency="\$(LATEST_DIR)/dependencies/$dependency"

	debug_object="\$(DEBUG_DIR)/objects/$object"
	debug_dependency="\$(DEBUG_DIR)/dependencies/$dependency"

	release_object="\$(RELEASE_DIR)/objects/$object"
	release_dependency="\$(RELEASE_DIR)/dependencies/$dependency"

	LATEST_RULES+="\
$latest_object: $source
	@\$(CC) \$(CFLAGS) \$(CPATHS) -MMD -MF $latest_dependency -c $source -o $latest_object

"
	DEBUG_RULES+="\
$debug_object: $source
	@\$(CC) \$(CFLAGS) \$(CPATHS) -MMD -MF $debug_dependency -c $source -o $debug_object

"

	RELEASE_RULES+="\
$release_object: $source
	@\$(CC) \$(CFLAGS) \$(CPATHS) -MMD -MF $release_dependency -c $source -o $release_object

"
done

# DEBUG_RULES
# RELEASE_RULES

cat << EOF > ./Makefile
$HEADER

# This Makefile was automatically generated by Trillian.
# See the source code to learn more.

NAME = $NAME
RELEASE = $RELEASE

CC = $CC
CFLAGS = $CFLAGS
CPATHS = $CPATHS

SOURCES = $SOURCES

OBJECTS = $OBJECTS

DEPENDENCIES = $DEPENDENCIES

LATEST_DIR = ./build/releases/latest
DEBUG_DIR = ./build/debug
RELEASE_DIR = ./build/releases/\$(RELEASE)

LATEST_OBJECTS = \$(addprefix \$(LATEST_DIR)/objects/, \$(OBJECTS))
LATEST_DEPENDENCIES = \$(addprefix \$(LATEST_DIR)/dependencies/, \$(DEPENDENCIES))

DEBUG_OBJECTS = \$(addprefix \$(DEBUG_DIR)/objects/, \$(OBJECTS))
DEBUG_DEPENDENCIES = \$(addprefix \$(DEBUG_DIR)/dependencies/, \$(DEPENDENCIES))

RELEASE_OBJECTS = \$(addprefix \$(RELEASE_DIR)/objects/, \$(OBJECTS))
RELEASE_DEPENDENCIES = \$(addprefix \$(RELEASE_DIR)/dependencies/, \$(DEPENDENCIES))

all: build

build: \$(LATEST_OBJECTS)
	@mkdir -p \$(LATEST_DIR)
	@ar rcs \$(LATEST_DIR)/bin/\$(NAME) \$(LATEST_OBJECTS)

debug: CFLAGS += -DDEBUG -g
debug: \$(DEBUG_OBJECTS)
	@mkdir -p \$(DEBUG_DIR)
	@ar rcs \$(DEBUG_DIR)/bin/\$(NAME) \$(DEBUG_OBJECTS)

release: CFLAGS += -03
release: \$(RELEASE_OBJECTS)
	@mkdir -p \$(RELEASE_DIR)
	@rcs \$(RELEASE_DIR)/bin/\$(NAME) \$(RELEASE_OBJECTS)

\$(NAME): build

clean:
	@\$(RM) \$(LATEST_OBJECTS)
	@\$(RM) \$(DEBUG_OBJECTS)
	@\$(RM) \$(RELEASE_OBJECTS)

fclean: clean
	@\$(RM) \$(LATEST_DIR)/bin/\$(NAME)
	@\$(RM) \$(DEBUG_DIR)/bin/\$(NAME)
	@\$(RM) \$(RELEASE_DIR)/bin/\$(NAME)

re: fclean all

.PHONY: all build debug release \$(NAME) clean fclean re

-include \$(LATEST_DEPENDENCIES)
-include \$(DEBUG_DEPENDENCIES)
-include \$(RELEASE_DEPENDENCIES)

$LATEST_RULES
$DEBUG_RULES
$([ "$RELEASE" == "latest" ] && echo -n "" || echo -n $RELEASE )
EOF